{
	"publisher": "theNestruo",
	"name": "z80-asm-meter",
	"version": "5.4.1",
	"engines": {
		"vscode": "^1.74.0"
	},
	"displayName": "Z80 Assembly meter",
	"description": "Z80 Assembly clock cycles and bytecode size meter",
	"icon": "images/icon.128.png",
	"galleryBanner": {
		"color": "#191919",
		"theme": "dark"
	},
	"categories": [
		"Programming Languages"
	],
	"keywords": [
		"asm",
		"assembler",
		"assembly",
		"Zilog",
		"Z80",
		"Z80A",
		"Z80N",
		"Amstrad CPC",
		"CPC",
		"MSX",
		"ZX Spectrum",
		"ZX Spectrum Next"
	],
	"license": "LGPL-3.0",
	"homepage": "https://github.com/theNestruo/z80-asm-meter-vscode",
	"bugs": {
		"url": "https://github.com/theNestruo/z80-asm-meter-vscode/issues"
	},
	"repository": {
		"type": "git",
		"url": "https://github.com/theNestruo/z80-asm-meter-vscode.git"
	},
	"author": {
		"email": "theNestruo@gmail.com",
		"name": "NÃ©stor Sancho",
		"url": "https://thenestruo.github.io/"
	},
	"activationEvents": [
		"onLanguage:asm-collection",
		"onLanguage:pasmo",
		"onLanguage:z80",
		"onLanguage:z80-asm",
		"onLanguage:z80-asm-meter",
		"onLanguage:z80-macroasm",
		"onLanguage:zeus-asm",
		"workspaceContains:**/*.{asm,ASM,c,C,inc,INC,s,S,z80,Z80}"
	],
	"contributes": {
		"languages": [
			{
				"id": "z80-asm-meter",
				"aliases": [
					"Z80 Assembly"
				]
			}
		],
		"commands": [
			{
				"title": "Z80 Assembly meter: copy to clipboard",
				"command": "z80-asm-meter.copyToClipboard"
			}
		],
		"configuration": [
			{
				"order": 10,
				"properties": {
					"z80-asm-meter.languageIds": {
						"order": 10,
						"type": [
							"array",
							"null"
						],
						"default": [
							"asm-collection",
							"pasmo",
							"z80",
							"z80-asm",
							"z80-macroasm",
							"zeus-asm"
						],
						"description": "Additional language IDs for which the extension is enabled (such as \"c\" for in-lined assembly)"
					},
					"z80-asm-meter.platform": {
						"order": 20,
						"type": "string",
						"enum": [
							"z80",
							"msx",
							"pc8000",
							"cpc",
							"z80n"
						],
						"default": "z80",
						"description": "Controls the instruction set and the timing information",
						"enumDescriptions": [
							"Default Z80 instruction set and default timing information",
							"MSX: default Z80 instruction set and Z80+M1 timing information (MSX standard)",
							"NEC PC-8000 series: default Z80 instruction set and both default and Z80+M1 timing information",
							"Amstrad CPC: default Z80 instruction set and timing measured in number of NOPs",
							"ZX Spectrum Next Extended Z80 instruction set and default timing information"
						]
					},
					"z80-asm-meter.syntax": {
						"order": 30,
						"type": "string",
						"enum": [
							"default",
							"glass",
							"pasmo",
							"sjasm",
							"sjasmplus",
							"tniasm"
						],
						"default": "default",
						"description": "Adjusts the main syntax of the assembler",
						"enumDescriptions": [
							"Matches most assemblers",
							"Matches Glass Z80 assembler syntax",
							"Matches Pasmo assembler syntax",
							"Matches SjASM assembler syntax",
							"Matches SjASMPlus assembler syntax",
							"Matches tniASM assembler syntax"
						]
					},
					"z80-asm-meter.expandSelectionToLine": {
						"order": 40,
						"type": "boolean",
						"default": true,
						"description": "When enabled, expands the selection to cover entire lines"
					}
				}
			},
			{
				"title": "Status bar",
				"order": 20,
				"properties": {
					"z80-asm-meter.statusBar.alignment": {
						"order": 10,
						"type": "string",
						"enum": [
							"leftmost",
							"left",
							"right",
							"rightmost"
						],
						"default": "right",
						"description": "Controls the status bar item position",
						"enumDescriptions": [
							"Leftmost position of the status bar",
							"Left side of the status bar",
							"Right side of the status bar",
							"Rightmost position of the status bar"
						]
					},
					"z80-asm-meter.statusBar.showInstruction": {
						"order": 20,
						"type": "boolean",
						"default": false,
						"description": "Shows the processed instruction in the status bar"
					},
					"z80-asm-meter.statusBar.totalTimings": {
						"order": 30,
						"type": "string",
						"enum": [
							"all",
							"combineAll",
							"smart",
							"combineSmart",
							"best",
							"default"
						],
						"default": "smart",
						"description": "Shows total timing calculations in the status bar",
						"enumDescriptions": [
							"Shows all the total timing calculations that apply to the selection",
							"Shows all the total timing calculations combined to reduce the size of the status bar item",
							"Shows total timing calculations that are relevant to the selection",
							"Shows total timing calculations that are relevant to the selection combined to reduce the size of the status bar item",
							"Shows the total timing calculation that best fits the selection",
							"Does not show any alternative total timing calculation"
						]
					},
					"z80-asm-meter.statusBar.totalTimingsOrder": {
						"order": 35,
						"type": "string",
						"enum": [
							"retFlowJumpCall",
							"flowRetJumpCall",
							"retJumpCallFlow"
						],
						"default": "retFlowJumpCall",
						"description": "Determines the order of the total timing calculations in the status bar when more than one total timing calculation is visible",
						"enumDescriptions": [
							"At exit point (returns) first. Execution flow next. Other exit points (jumps and calls) last",
							"Execution flow first. Any exit points (returns, jumps and calls) last",
							"Any exit point (returns, jumps and calls) first, execution flow last"
						]
					},
					"z80-asm-meter.statusBar.copyTimingsAsHints": {
						"order": 40,
						"type": "boolean",
						"default": false,
						"description": "Enable copying timings as timing hints, instead of human readable format"
					},
					"z80-asm-meter.statusBar.sizeNumericFormat": {
						"order": 43,
						"type": "string",
						"enum": [
							"decimal",
							"hexadecimal",
							"both"
						],
						"default": "decimal",
						"description": "The numerical format of the size in bytes in the status bar",
						"enumDescriptions": [
							"Size in bytes as a decimal number",
							"Size in bytes as an hexadecimal number",
							"Size in bytes as both a decimal and an hexadecimal number"
						]
					},
					"z80-asm-meter.statusBar.sizeHexadecimalFormat": {
						"order": 46,
						"type": "string",
						"enum": [
							"hash",
							"motorola",
							"intel",
							"intelUppercase",
							"cStyle",
							"uppercaseHash",
							"uppercaseMotorola",
							"uppercaseIntel",
							"uppercaseIntelUppercase",
							"uppercaseCStyle"
						],
						"default": "motorola",
						"description": "The hexadecimal format for the hexadecimal size in bytes in the status bar",
						"enumDescriptions": [
							"Hexadecimal size in bytes in hash format (#1fff)",
							"Hexadecimal size in bytes in Motorola format ($1fff)",
							"Hexadecimal size in bytes in Intel format (1fffhh)",
							"Hexadecimal size in bytes in Intel format, uppercase suffix (1fff)",
							"Hexadecimal size in bytes in C-style format (0x1fff)",
							"Hexadecimal size in bytes in uppercase, hash format (#B45D)",
							"Hexadecimal size in bytes in uppercase, Motorola format ($B45D)",
							"Hexadecimal size in bytes in uppercase, Intel format, lowercase suffix (0B45Dh)",
							"Hexadecimal size in bytes in uppercase, Intel format (0B45DH)",
							"Hexadecimal size in bytes in uppercase, C-style format (0xB45D)"
						]
					},
					"z80-asm-meter.statusBar.sizeSuffix": {
						"order": 50,
						"type": "string",
						"default": " byte| bytes",
						"description": "The suffix for the size in bytes in the status bar",
						"examples": [
							" byte| bytes",
							" B"
						]
					},
					"z80-asm-meter.statusBar.showBytes": {
						"order": 60,
						"type": "boolean",
						"default": false,
						"description": "Shows the bytes (opcode) in the status bar"
					},
					"z80-asm-meter.statusBar.debounce": {
						"order": 70,
						"type": "integer",
						"default": 100,
						"description": "Milliseconds to prevent metering from being called too frequently when the selection changes"
					},
					"z80-asm-meter.statusBar.cacheSize": {
						"order": 75,
						"type": "integer",
						"default": 100,
						"description": "Size of the cache to minimize metering calculations when navigating through code"
					},
					"z80-asm-meter.statusBar.instructionIcon": {
						"order": 80,
						"type": "string",
						"minLength": 1,
						"default": "$(code)",
						"description": "The icon to identify the instruction in the status bar",
						"examples": [
							"$(code)",
							"$(comment)",
							"$(file-code)",
							"$(file-text)",
							"$(report)",
							"$(selection)",
							"$(symbol-keyword)",
							"$(symbol-snippet)"
						]
					},
					"z80-asm-meter.statusBar.timingsIcon": {
						"order": 80,
						"type": "string",
						"minLength": 1,
						"default": "$(watch)",
						"description": "The icon to identify the timings in the status bar",
						"examples": [
							"$(clock)",
							"$(dashboard)",
							"$(watch)",
							"$(zap)",
							"Ts "
						]
					},
					"z80-asm-meter.statusBar.sizeIcon": {
						"order": 80,
						"type": "string",
						"minLength": 1,
						"default": "$(file-binary)",
						"description": "The icon to identify the size and the bytes in the status bar",
						"examples": [
							"$(archive)",
							"$(database)",
							"$(file-binary)",
							"$(package)",
							"$(pie-chart)",
							"$(preview)",
							"$(symbol-misc)",
							", Sz "
						]
					}
				}
			},
			{
				"title": "Assembler syntax",
				"order": 30,
				"properties": {
					"z80-asm-meter.syntaxFeature.labelColonOptional": {
						"order": 10,
						"type": "boolean",
						"default": false,
						"description": "When enabled, the label trailing colon is optional and the labels must not be indented. When disabled, the labels must be followed by a colon (:) and can be indented"
					},
					"z80-asm-meter.syntaxFeature.repeat": {
						"order": 20,
						"type": "string",
						"enum": [
							"disabled",
							"brackets",
							"dot"
						],
						"default": "disabled",
						"description": "Enables support for parsing single instruction repetitions",
						"enumDescriptions": [
							"Disables single instruction reptitions",
							"The single instruction reptitions are specified within square brackets ([ and ]) before the instruction",
							"The single instruction reptitions are specified after a dot (.) before the instruction"
						]
					},
					"z80-asm-meter.syntaxFeature.lineSeparator": {
						"order": 30,
						"type": "string",
						"enum": [
							"disabled",
							"colon",
							"pipe"
						],
						"default": "disabled",
						"description": "Adjusts the line separator to match the syntax of the assembler",
						"enumDescriptions": [
							"Does not allow multiple instructions on a single line",
							"Use colon (:) to have more than one instruction on a line",
							"Use pipe (|) to have more than one instruction on a line. This behaviour matches some assemblers such as tniASM"
						]
					},
					"z80-asm-meter.syntaxFeature.fakeInstructions": {
						"order": 40,
						"type": "boolean",
						"default": false,
						"description": "Enables SjASMPlus fake instructions support"
					},
					"z80-asm-meter.syntaxFeature.registerListInstructions": {
						"order": 42,
						"type": "boolean",
						"default": false,
						"description": "Enables SjASMPlus register list instructions support"
					},
					"z80-asm-meter.syntaxFeature.negativeConditions": {
						"order": 44,
						"type": "boolean",
						"default": false,
						"description": "Enables Glass negative conditions support"
					},
					"z80-asm-meter.syntaxFeature.dupEdup": {
						"order": 46,
						"type": "boolean",
						"default": false,
						"description": "Enables DUP/EDUP repetition blocks"
					},
					"z80-asm-meter.syntaxFeature.reptEndr": {
						"order": 48,
						"type": "boolean",
						"default": false,
						"description": "Enables REPT/ENDR repetition blocks"
					},
					"z80-asm-meter.syntaxFeature.reptEndm": {
						"order": 50,
						"type": "boolean",
						"default": false,
						"description": "Enables REPT/ENDM repetition blocks"
					}
				}
			},
			{
				"title": "Parser",
				"order": 40,
				"properties": {
					"z80-asm-meter.parser.directives.defsAsInstructions": {
						"order": 10,
						"type": "boolean",
						"default": false,
						"description": "When enabled, tries to parse DEFS directive bytes as single byte instructions"
					}
				}
			},
			{
				"title": "Total timing calculation",
				"order": 50,
				"properties": {
					"z80-asm-meter.timing.executionFlow.enabled": {
						"order": 110,
						"type": "boolean",
						"default": true,
						"mark": "Enables execution flow total timing calculation"
					},
					"z80-asm-meter.timing.executionFlow.threshold": {
						"order": 120,
						"type": "number",
						"default": 2,
						"description": "Minimum number of instructions to be selected for the calculation of execution flow total timing"
					},
					"z80-asm-meter.timing.executionFlow.requireConditional": {
						"order": 130,
						"type": "boolean",
						"default": true,
						"description": "Requires at least one conditional instruction to enable execution flow total timing calculation"
					},
					"z80-asm-meter.timing.executionFlow.stopOnUnconditionalJump": {
						"order": 140,
						"type": "boolean",
						"default": true,
						"description": "Disables execution flow total timing calculation if an unconditional JP, JR or RET instruction is found"
					},
					"z80-asm-meter.timing.executionFlow.icon": {
						"order": 150,
						"type": "string",
						"minLength": 1,
						"default": "$(debug-step-over)",
						"description": "Execution flow total timing calculation icon in the status bar",
						"examples": [
							"$(arrow-down)",
							"$(chevron-down)",
							"$(debug-step-into)",
							"$(debug-step-over)",
							"$(kebab-horizontal)",
							"$(kebab-vertical)",
							"$(run-below)",
							"$(triangle-down)"
						]
					},
					"z80-asm-meter.timing.atExit.retEnabled": {
						"order": 210,
						"type": "boolean",
						"default": true,
						"description": "Enables total timing calculation of the execution flow to the selected exit point when the selection ends with a RET, RETI or RETN instruction"
					},
					"z80-asm-meter.timing.atExit.jumpEnabled": {
						"order": 211,
						"type": "boolean",
						"default": true,
						"description": "Enables total timing calculation of the execution flow to the selected exit point when the selection ends with a DJNZ, JP or JR instruction"
					},
					"z80-asm-meter.timing.atExit.callEnabled": {
						"order": 212,
						"type": "boolean",
						"default": false,
						"description": "Enables total timing calculation of the execution flow to the selected exit point when the selection ends with a CALL or RST instruction"
					},
					"z80-asm-meter.timing.atExit.threshold": {
						"order": 220,
						"type": "number",
						"default": 2,
						"description": "Minimum number of instructions to be selected for the calculation of total timing calculation of the execution flow to the selected exit point"
					},
					"z80-asm-meter.timing.atExit.requireConditional": {
						"order": 230,
						"type": "boolean",
						"default": true,
						"description": "Requires at least one conditional instruction to enable total timing calculation of the execution flow to the selected exit point"
					},
					"z80-asm-meter.timing.atExit.stopOnUnconditionalJump": {
						"order": 240,
						"type": "boolean",
						"default": true,
						"description": "Disables total timing calculation of the execution flow to the selected exit point if an unconditional JP, JR or RET instruction is found"
					},
					"z80-asm-meter.timing.atExit.retIcon": {
						"order": 250,
						"type": "string",
						"minLength": 1,
						"default": "$(debug-step-back)",
						"description": "Total timing calculation of the execution flow to the selected exit point (RET, RETI or RETN instruction) icon in the status bar",
						"examples": [
							"$(arrow-left)",
							"$(arrow-up)",
							"$(chevron-left)",
							"$(chevron-up)",
							"$(debug-restart)",
							"$(debug-step-back)",
							"$(debug-step-into)",
							"$(debug-step-out)",
							"$(discard)",
							"$(newline)",
							"$(reply)",
							"$(triangle-left)",
							"$(triangle-up)"
						]
					},
					"z80-asm-meter.timing.atExit.jumpIcon": {
						"order": 251,
						"type": "string",
						"minLength": 1,
						"default": "$(debug-step-out)",
						"description": "Total timing calculation of the execution flow to the selected exit point (DJNZ, JP or JR instruction) icon in the status bar",
						"examples": [
							"$(arrow-right)",
							"$(chevron-right)",
							"$(debug-step-into)",
							"$(debug-step-out)",
							"$(indent)",
							"$(redo)",
							"$(triangle-right)"
						]
					},
					"z80-asm-meter.timing.atExit.callIcon": {
						"order": 252,
						"type": "string",
						"minLength": 1,
						"default": "$(debug-step-into)",
						"description": "Total timing calculation of the execution flow to the selected exit point (CALL or RST instruction) icon in the status bar",
						"examples": [
							"$(arrow-right)",
							"$(chevron-right)",
							"$(debug-step-into)",
							"$(debug-step-out)",
							"$(indent)",
							"$(redo)",
							"$(triangle-right)"
						]
					}
				}
			},
			{
				"title": "Timing hints",
				"order": 60,
				"properties": {
					"z80-asm-meter.timing.hints.enabled": {
						"order": 10,
						"type": "string",
						"enum": [
							"disabled",
							"subroutines",
							"any",
							"ignoreCommentedOut"
						],
						"default": "subroutines",
						"description": "Enables timing hints read from the line comment",
						"enumDescriptions": [
							"Disables timing hints",
							"Subroutine timing hint will be added to CALL, DJNZ, JP, JR, RET or RST instructions only",
							"Any timing hint found, regardless the instruction. This includes empty lines",
							"Any timing hint found, regardless the instruction, but trying to exclude empty lines that look like commented out source code"
						]
					},
					"z80-asm-meter.timing.hints.regexps": {
						"order": 20,
						"type": [
							"array",
							"null"
						],
						"items": {
							"type": "object",
							"properties": {
								"pattern": {
									"type": "string",
									"description": "The pattern of the regular expression to match against the line comment"
								},
								"flags": {
									"type": [
										"string",
										"undefined"
									],
									"description": "The string indicating the flags of the regular expression"
								},
								"z80": {
									"type": [
										"number",
										"string",
										"undefined"
									],
									"description": "Declares or overrides Z80 default timing hint"
								},
								"msx": {
									"type": [
										"number",
										"string",
										"undefined"
									],
									"description": "Declares or overrides Z80+M1 timing hint (MSX standard)"
								},
								"m1": {
									"type": [
										"number",
										"string",
										"undefined"
									],
									"description": "Declares or overrides Z80+M1 timing hint"
								},
								"cpc": {
									"type": [
										"number",
										"string",
										"undefined"
									],
									"description": "Declares or overrides timing hint measured in number of NOPs"
								},
								"t": {
									"type": [
										"number",
										"string",
										"undefined"
									],
									"description": "Declares or overrides default timing hint"
								},
								"ts": {
									"type": [
										"number",
										"string",
										"undefined"
									],
									"description": "Declares or overrides default timing hint"
								}
							}
						},
						"default": [],
						"description": "An array of regexp-based user-defined timing hints"
					}
				}
			},
			{
				"title": "Macros",
				"order": 70,
				"properties": {
					"z80-asm-meter.macros": {
						"order": 10,
						"type": [
							"array",
							"null"
						],
						"items": {
							"type": "object",
							"properties": {
								"name": {
									"type": "string",
									"description": "The name of the macro; will be matched against the mnemonic of the source code."
								},
								"z80": {
									"type": [
										"number",
										"string",
										"undefined"
									],
									"description": "Declares or overrides Z80 default timing hint"
								},
								"msx": {
									"type": [
										"number",
										"string",
										"undefined"
									],
									"description": "Declares or overrides Z80+M1 macro timing information (MSX standard)"
								},
								"m1": {
									"type": [
										"number",
										"string",
										"undefined"
									],
									"description": "Declares or overrides Z80+M1 macro timing information"
								},
								"cpc": {
									"type": [
										"number",
										"string",
										"undefined"
									],
									"description": "Declares or overrides macro timing measured in number of NOPs"
								},
								"t": {
									"type": [
										"number",
										"string",
										"undefined"
									],
									"description": "Declares or overrides default macro timing"
								},
								"ts": {
									"type": [
										"number",
										"string",
										"undefined"
									],
									"description": "Declares or overrides default macro timing"
								},
								"size": {
									"type": [
										"number",
										"string",
										"undefined"
									],
									"description": "Declares or overrides macro byte count"
								},
								"instructions": {
									"type": [
										"array",
										"undefined"
									],
									"description": "The macro definition, as instructions",
									"items": {
										"type": "string"
									}
								}
							}
						},
						"default": [],
						"description": "An array of user-defined macros"
					}
				}
			}
		]
	},
	"main": "./dist/extension.js",
	"scripts": {
		"vscode:prepublish": "npm run package",
		"compile": "npm run check-types && npm run lint && node esbuild.js",
		"watch": "npm-run-all -p watch:*",
		"watch:esbuild": "node esbuild.js --watch",
		"watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
		"package": "npm run check-types && npm run lint && node esbuild.js --production",
		"compile-tests": "tsc -p . --outDir out",
		"check-types": "tsc --noEmit",
		"lint": "eslint \"src/**/*.ts\""
	},
	"devDependencies": {
		"@types/mocha": "^10.0.6",
		"@types/node": "22.x",
		"@types/vscode": "^1.73.0",
		"@typescript-eslint/eslint-plugin": "^8.0.1",
		"@typescript-eslint/parser": "^8.0.1",
		"esbuild": "^0.23.0",
		"eslint": "^8.57.0",
		"npm-run-all": "^4.1.5",
		"typescript": "^5.5.2"
	},
	"dependencies": {
		"quick-lru": "^7.0.0"
	}
}
